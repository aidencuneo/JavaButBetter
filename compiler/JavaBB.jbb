static main:
    println '''
        This is a long one
        Yeah
    '''

    // Get input and output directories
    let compDir = 'src'
    compDir = args[0] if args
    let outDir = compDir + '_out'
    outDir = args[1] if args.length > 1

    // Create directory if it doesn't exist
    if !new File(outDir).exists()
        new File(outDir).mkdir()

    // Compile files one by one
    let files = new File(compDir).list((File dir, String name) -> name.endsWith('.jbb'))

    for i in files.length
        let fileContent = ''
        let fromPath = compDir + '/' + files[i]
        let toPath = outDir + '/' + files[i].split('\\.')[0] + '.java'
        let className = files[i].split('\\.')[0]

        // Read input file
        try let scanner = new Scanner(new File(fromPath))
            fileContent = scanner.useDelimiter('\\Z').next()
        catch (FileNotFoundException e)
            ...

        // Compile this file
        let res = Compiler.compileFile(className, fileContent)
        let compiled = res.getCompiledCode(className)

        // Write to output file
        try let writer = new PrintWriter(toPath)
            new File(toPath).createNewFile()
            writer.println(compiled)
        catch (IOException e)
            ...

    // Compile LangUtil
    let res = Compiler.compileFile('LangUtil', '''
# print(Object s):
    System.out.print('' + s)

# println(Object s):
    System.out.println('' + s)

# bool isTruthy(bool v):
    ret v

# bool isTruthy(Object v):
    ret v != null

# bool isTruthy(int v):
    ret v != 0

# bool isTruthy(double v):
    ret v != 0

# bool isTruthy(string v):
    ret !v.isEmpty()

# bool (T) isTruthy(T[] v):
    ret v.length > 0

# bool isTruthy(List v):
    ret !v.isEmpty()

# T[] (T) asIterable(T[] v):
    ret v

# List asIterable(int n):
    let lst = new ArrayList<Integer>()
    inline `for (int i = 0 i < n ++i)`
        lst.add(i)
    ret lst

# List asIterable(List v):
    ret v

# char[] asIterable(string s):
    ret s.toCharArray()
    '''.trim())
    let langUtilCode = res.getCompiledCode('LangUtil')

    try let writer = new PrintWriter(outDir + '/LangUtil.java')
        new File(outDir + '/LangUtil.java').createNewFile()
        writer.println(langUtilCode)
    catch (IOException e)
        ...

    println('Done.')
