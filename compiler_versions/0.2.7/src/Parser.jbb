static ArrayList<Token> convertIdentifiers(ArrayList<Token> tok):
    let lastWasDot = false

    inline(for (int i = 0; i < tok.size(); ++i))
        let t = tok.get(i)
        let nextTok = i + 1 < tok.size() ? tok.get(i + 1) : new Token()

        // println i + ": " + tok

        if t.type == Token.Type.ID && !lastWasDot
            // Perform identifier conversion

            // String and object are in lowercase
            if t.value.equals("string")
                t.value = "String"
            elif t.value.equals("String")
                t.value = "string"
            elif t.value.equals("object")
                t.value = "Object"
            elif t.value.equals("Object")
                t.value = "object"

            // Some primitive type classes are shortened
            elif t.value.equals("Int")
                t.value = "Integer"
            elif t.value.equals("Integer")
                t.value = "Int"
            elif t.value.equals("Char")
                t.value = "Character"
            elif t.value.equals("Character")
                t.value = "Char"
            elif t.value.equals("bool")
                t.value = "boolean"
            elif t.value.equals("boolean")
                t.value = "_boolean"
            elif t.value.equals("Boolean")
                t.value = "Bool"
            elif t.value.equals("Bool")
                t.value = "Boolean"

            // Apply to the token
            tok.set(i, t)

            // // Aliases
            // for k in Compiler.aliases.keySet()
            //     println k
            //     println Compiler.aliases.get(k).tokens

            if Compiler.aliases.containsKey(t.value)
                let alias = Compiler.aliases.get(t.value)
                let aliasTokens = alias.tokens
                let hasArgs = !!alias.args && nextTok.type == Token.Type.EXPR

                // Remove alias name
                tok.remove(i)

                // If this alias has arguments, check for a bracketed expression
                if hasArgs
                    // Perform identifier replacement on alias tokens
                    let argTokens = Tokeniser.extractCommaExpr(nextTok.value)
                    aliasTokens = replaceIdentifiers(aliasTokens, alias.args, argTokens)

                    // Remove expression
                    tok.remove(i)

                // Push tokens onto tok
                tok.addAll(i, aliasTokens)

                // Push i ahead by the tokens added
                i += aliasTokens.size() - 1
                // --i if hasArgs

        lastWasDot = false
        if t.type == Token.Type.DOT
            lastWasDot = true

    return tok

static ArrayList<Token> replaceIdentifiers(ArrayList<Token> tok, ArrayList<string> names, ArrayList<ArrayList<Token>> values):
    let lastWasDot = false
    let newTok = new ArrayList<Token>()

    for t in tok
        if t.type == Token.Type.ID && !lastWasDot
            let i = names.indexOf(t.value)

            if i != -1
                newTok.addAll(values.get(i))
                next

        newTok.add(t)

    return newTok

// static ArrayList<Token> parseAccessMods(ArrayList<Token> tok):
//     let accessMod = AccessMod.DEFAULT
//     let isStatic = false

//     while tok
//         let v = tok.get(0).value

//         if v.equals("+") || v.equals("public")
//             accessMod = AccessMod.PUBLIC
//         elif v.equals("-") || v.equals("private")
//             accessMod = AccessMod.PRIVATE
//         elif v.equals("*") || v.equals("protected")
//             accessMod = AccessMod.PROTECTED
//         elif v.equals("#") || v.equals("static")
//             isStatic = true
//         else
//             break

//         // Remove token
//         tok.remove(0)

//     println tok

//     let newTok = new ArrayList<Token>()

//     newTok.add(new Token(Token.Type.ACCESS_MOD, ("" + accessMod).toLowerCase()))
//     if isStatic
//         newTok.add(new Token(Token.Type.STATIC, "static"))
//     else
//         newTok.add(new Token())
//     newTok.add(t) for t in tok

//     return newTok

// static ArrayList<Token> parseDeclaration(ArrayList<Token> tok):
//     // Parse access modifiers
//     tok = Parser.parseAccessMods(tok)

//     // Declare 'end' to be either the equals sign or the end of the line
//     let end = Compiler.findTokenType(tok, Token.Type.ASSIGN)
//     end = tok.size() if end == -1

//     // Find name
//     let nameIndex = end - 1
//     while end >= 0
//         break if tok.get(nameIndex).type == Token.Type.ID
//         --nameIndex

//     // Get position of the first token after access modifiers
//     let i = 0
//     while i < end
//         let t = tok.get(i).type
//         break if t != Token.Type.ACCESS_MOD && t != Token.Type.STATIC
//         ++i

//     // Check for type arguments
//     if 

//     // Seek past access modifiers, then start taking tokens as the type

//     println tok, end, nameIndex
//     return null
