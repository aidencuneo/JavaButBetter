HashMap<string, Class> classes
string startTemplate
string endTemplate

CompResult(
    HashMap<string, Class> classes,
    string startTemplate,
    string endTemplate
):
    this.classes = classes
    this.startTemplate = startTemplate
    this.endTemplate = endTemplate

string constructClassString(string className):
    let cl = classes.getOrDefault(className, new Class())
    return "" if cl.code.isBlank()

    let accessModStr = MethodAccess.accessModToString(cl.access)
    let separator = accessModStr ? " " : ""

    let out = accessModStr + separator + "class " + className + " {\n"
    out += "    " + cl.code.trim()
    out += "\n}\n"

    return out

string getCompiledCode(string mainClassName):
    // Construct classes
    let out = ""

    // File class goes first
    if classes.containsKey(mainClassName)
        out += constructClassString(mainClassName)

    // Construct other classes
    for c in classes.keySet()
        // The null class is used to write code without a class
        if c == "null"
            out += classes.get(c).code
        elif c != mainClassName
            out += constructClassString(c)

    return startTemplate + "\n" + out + endTemplate
