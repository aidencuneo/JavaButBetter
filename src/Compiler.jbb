static string mainClassName = ""
static string currentClass = ""
static string startTemplate = ""
static string endTemplate = ""
inline(public static HashMap<String, String> outClasses = new HashMap<>();)
inline(public static HashMap<String, AccessMod> outClassAccess = new HashMap<>();)
inline(public static HashMap<String, Alias> aliases = new HashMap<>();)

static int nextTempVar = 0
static int indent = 0

static CompResult compileFile(string className, string code):
    // Allow all methods to use these variables
    mainClassName = className
    currentClass = className
    startTemplate = "import java.io.*;\nimport java.util.*;\n"
    endTemplate = ""

    // Reset class data
    outClasses = new HashMap<>()
    outClassAccess = new HashMap<>()
    outClassAccess.put(mainClassName, AccessMod.PUBLIC)
    aliases = new HashMap<>()

    nextTempVar = 0
    
    ArrayList<string> lines = Tokeniser.splitFile(code)
    int lastIndent = 0

    for i in lines.size()
        // System.out.println(i + "/" + (lines.size() - 1) + ": " + lines.get(i))
        string out = outClasses.getOrDefault(currentClass, "")

        ArrayList<Token> tok = Tokeniser.tokLine(lines.get(i))

        // Nothing in the line?
        next if !tok

        indent = tok.get(0).value.length()
        tok.remove(0)

        // Nothing but indentation in the line?
        next if !tok

        // Indentation controls braces
        while indent > lastIndent
            lastIndent += 4
            out = out.trim()
            out += " {\n"

        while indent < lastIndent
            out += " ".repeat(lastIndent) + "}\n"
            lastIndent -= 4

        // Add indentation for every line
        out += " ".repeat(indent + 4)

        // Add compiled statement
        out = compileStatement(tok, out)
        out += "\n"

        // Push to current class
        outClasses.put(currentClass, out)

        lastIndent = indent

        println Util.d(tok)

    // After the final line of a class, reset indentation
    while lastIndent > 0
        string curOut = outClasses.getOrDefault(currentClass, "")
        outClasses.put(currentClass, curOut + " ".repeat(lastIndent) + "}\n")
        lastIndent -= 4

    // Return compilation result
    return new CompResult(outClasses, outClassAccess, startTemplate, endTemplate)

static string compileStatement(ArrayList<Token> tok, string out):
    return "" if !tok

    ArrayList<Token.Type> types = getTokenTypes(tok)
    Token.Type startTok = types.get(0)
    Token.Type endTok = Util.get(types, -1)
    int f = -1

    // Imports
    if startTok == Token.Type.IMPORT
        let importStr = "import "
        inline(for (int j = 1; j < tok.size(); ++j))
            importStr += tok.get(j).value
        startTemplate += importStr + ";\n"

    // Options
    elif startTok == Token.Type.OPTION
        if tok.size() < 2
            // Error!
            return ""

        if tok.size() < 3
            // Error!
            return ""

        string optionName = tok.get(1).value
        string optionValue = tok.get(2).value
        Options.setOption(optionName, optionValue)

    // Aliases
    elif startTok == Token.Type.ALIAS
        if tok.size() < 2
            // Error!
            return ""

        // Find the equals sign
        if (f = findTokenType(tok, Token.Type.ASSIGN)) == -1
            // Error!
            return ""

        if f < 2
            // Error!
            return ""

        string name = tok.get(1).value
        let args = new ArrayList<string>()

        if f > 2
            args = Tokeniser.extractArgsFromExpr(tok.get(2).value)

        let tokens = Util.select(tok, f + 1)

        aliases.put(name, new Alias(name, tokens, args))
        // println name + " = " + args + ", " + tokens

    // Classes
    elif (f = findTokenType(tok, Token.Type.CLASS)) != -1 && f + 1 < tok.size()
        // Set code for previous class before moving to new one
        outClasses.put(currentClass, out)

        // Change current class
        currentClass = tok.get(f + 1).value
        out = outClasses.getOrDefault(currentClass, "")
        AccessMod accessMod = AccessMod.DEFAULT

        // out = out.trim()
        // out += "\n}\n\n"

        // Get access modifier from tokens before 'class'
        inline(for (int j = 0; j < f && accessMod == AccessMod.DEFAULT; ++j))
            accessMod = MethodAccess.accessModFromToken(tok.get(j))

        // Set access modifier for this class
        outClassAccess.put(currentClass, accessMod)

        // out += "{"

    // Control flow
    elif (startTok == Token.Type.IF
        || startTok == Token.Type.ELIF
        || startTok == Token.Type.ELSE
        || startTok == Token.Type.WHILE
        || startTok == Token.Type.UNTIL
    )
        inline(switch (startTok))
            inline(case IF -> out += "if (";)
            inline(case ELIF -> out += "else if (";)
            inline(case ELSE -> out += "else";)
            inline(case WHILE -> out += "while (";)
            inline(case UNTIL -> out += "while (!(";)
            inline(default -> {})

        if startTok != Token.Type.ELSE
            out += "LangUtil.isTruthy("
            out += compileExpr(Util.select(tok, 1))
            out += "))"
            out += ")" if startTok == Token.Type.UNTIL

    // For-in loops
    elif startTok == Token.Type.FOR && (f = findTokenType(tok, Token.Type.IN)) != -1
        out += "for ("
        string varname = tok.get(1).value
        out += "var " + varname + " : LangUtil.asIterable("
        out += compileExpr(Util.select(tok, f + 1))
        out += ")) "

    // Statement control flow (TODO: combine these together so precedence is the same)
    elif (f = findTokenTypeRev(tok, Token.Type.IF)) != -1
        out += "if (LangUtil.isTruthy("
        string cond = compileExpr(Util.select(tok, f + 1))
        out += cond.isEmpty() ? "true" : cond
        out += ")) { "
        out = compileStatement(Util.select(tok, 0, f), out)
        out += " }"

    elif (f = findTokenTypeRev(tok, Token.Type.WHILE)) != -1
        out += "while (LangUtil.isTruthy("
        string cond = compileExpr(Util.select(tok, f + 1))
        out += cond.isEmpty() ? "true" : cond
        out += ")) { "
        out = compileStatement(Util.select(tok, 0, f), out)
        out += " }"

    elif (f = findTokenTypeRev(tok, Token.Type.UNTIL)) != -1
        out += "while (!LangUtil.isTruthy("
        string cond = compileExpr(Util.select(tok, f + 1))
        out += cond.isEmpty() ? "false" : cond
        out += ")) { "
        out = compileStatement(Util.select(tok, 0, f), out)
        out += " }"

    elif (f = findTokenTypeRev(tok, Token.Type.FOR)) != -1
        // For-in
        int f_in = findTokenTypeRev(tok, Token.Type.IN)
        if f_in != -1
            out += "for ("
            string varname = tok.get(f + 1).value
            out += "var " + varname + " : LangUtil.asIterable("
            out += compileExpr(Util.select(tok, f_in + 1))
            out += ")) { "
            out = compileStatement(Util.select(tok, 0, f), out)
            out += " }"

    // Try
    elif startTok == Token.Type.TRY
        out += "try "
        string resources = compileExpr(Util.select(tok, 1), false)
        out += "(" + resources + ") " if resources

    // Catch
    elif startTok == Token.Type.CATCH
        out += "catch "

        if tok.size() > 2
            // Error!
            return ""

        elif tok.size() > 1
            Token t = tok.get(1)

            if t.type != Token.Type.EXPR
                // Error!
                return ""

            string args = compileMethodArgs(t.value)
            out += args + " " if args

    // Inline code
    elif startTok == Token.Type.INLINE
        if tok.size() < 2
            // Error!
            return ""

        string code = tok.get(1).value
        code = code.substring(1, code.length() - 1); // Strip backticks away
        out += code

    // Scoped statements - methods only (?)
    elif endTok == Token.Type.SCOPE
        // TODO: get/set
        if false
            ...

        // Methods
        else
            // access?, static?, typeargs?, [returntype|void], name, args?, scope

            // Eat access tokens
            let methodAccess = getMethodAccess(tok)
            tok = stripMethodAccess(tok)

            // Default access modifier for methods is public
            if methodAccess.accessMod == AccessMod.NONE
                methodAccess.accessMod = AccessMod.PUBLIC

            // Eat type args
            let typeArgs = ""
            if tok.size() > 0 && tok.get(0).type == Token.Type.EXPR
                let v = tok.get(0).value
                typeArgs = "<" + v.substring(1, v.length() - 1) + "> "
                tok.remove(0)

            // Eat scope token
            tok.remove(tok.size() - 1)

            // Eat method args
            let args = "()"
            if tok.size() > 0 && tok.get(tok.size() - 1).type == Token.Type.EXPR
                // Compile method arguments
                args = compileMethodArgs(tok.get(tok.size() - 1).value)
                tok.remove(tok.size() - 1)

            // Eat method name
            let methodName = ""
            if tok.size() > 0 && tok.get(tok.size() - 1).type == Token.Type.ID
                methodName = tok.get(tok.size() - 1).value
                tok.remove(tok.size() - 1)
            else
                // Error! Method name not given
                ...

            // Everything remaining is part of the return type
            string returnType = ""
            returnType += t.value + " " for t in tok
            returnType = "void " if !returnType

            // If method name is 'main', args must be (String[] args)
            if methodName.equals("main")
                args = "(String[] args)"

            // If method name is the same as the class name,
            // it's a constructor, so don't include the return type
            if methodName.equals(currentClass)
                out += methodAccess + " " + typeArgs + methodName + args
            else
                out += methodAccess + " " + typeArgs + returnType + methodName + args

    // Keywords
    elif startTok == Token.Type.RETURN
        out += "return "

        if tok.size() > 1
            out += compileExpr(Util.select(tok, 1))
        else
            out += "null"

        out += ";"

    elif startTok == Token.Type.BREAK
        out += "break;"

    elif startTok == Token.Type.CONTINUE
        out += "continue;"

    elif startTok == Token.Type.PASS
        // Do nothing
        ...

    // ID keywords
    elif (startTok == Token.Type.ID && (
        tok.get(0).value.equals("print") || tok.get(0).value.equals("println")
    ))
        // print, println
        if tok.get(0).value.equals("print") || tok.get(0).value.equals("println")
            out += "LangUtil." + tok.get(0).value + "("
            out += compileExpr(Util.select(tok, 1))
            out += ");"

    // Field declarations (two tokens minimum with no indentation)
    elif tok.size() >= 2 && !indent
        // println("!!!!!!\n\n\n\n\n" + out + "\n\n\n\n\n!!!!!!!!")
        int end = tok.size() - 1
        string value = ""

        if (f = findTokenType(tok, Token.Type.ASSIGN)) != -1
            value = " = " + compileExpr(Util.select(tok, f + 1))
            end = f - 1

        // Get method access
        MethodAccess methodAccess = getMethodAccess(tok, end)

        // Default access modifier for fields is public
        if methodAccess.accessMod == AccessMod.NONE
            methodAccess.accessMod = AccessMod.PUBLIC

        // Get variable name and type
        string varname = tok.get(end).value
        --end
        string vartype = tok.get(end).value

        out += methodAccess + " " + vartype + " " + varname + value + ";"

    // Expressions
    else
        // string assignment = ""

        // // Assign to temp if there is not already an assignment here
        // if findTokenType(tok, Token.Type.ASSIGN) == -1 && findTokenType(tok, Token.Type.COMP_ASSIGN) == -1
        //     assignment = "Object " + getNextTemp() + " = "

        string ending = endTok == Token.Type.COMMA ? "" : ";"
        out += compileExpr(tok, false) + ending

    return out

static string compileExpr(ArrayList<Token> tok, bool nested):
    string out = ""
    int f = -1
    int f2 = -1

    // Empty expression
    return out if !tok

    // Assignments
    if (f = findTokenType(tok, Token.Type.ASSIGN)) != -1
        string vartype = ""
        string varname = ""

        // type name = value
        if f == 2
            vartype = tok.get(0).value
            varname = tok.get(1).value

        // name = value
        elif f == 1
            varname = tok.get(0).value

        // ... = value
        else
            inline(for (int j = 0; j < f; ++j))
                varname += tok.get(j).value + " "
            varname = varname.trim()

        vartype = "var" if vartype.equals("let")

        out += "(" if nested

        if vartype
            out += vartype + " " + varname + " = "
        else
            out += varname + " = "

        out += compileExpr(Util.select(tok, f + 1))

        out += ")" if nested

    // Compound assignments
    elif (f = findTokenType(tok, Token.Type.COMP_ASSIGN)) != -1
        string varname = ""
        string oper = tok.get(f).value.substring(0, tok.get(f).value.length() - 1)

        // name = value
        if f == 1
            varname = tok.get(0).value

        // Error!
        else
            ...

        out += "(" if nested

        ArrayList<Token> exprTok = Util.select(tok, f + 1)

        // For custom operators, convert to 'name = (name oper value)'
        if List.of(".", "**", "??").contains(oper)
            exprTok.add(0, Token.fromString(varname))
            exprTok.add(1, Token.fromString(oper))
            out += varname + " = "

        // Otherwise, use 'name oper= (value)'
        else
            out += varname + " " + tok.get(f).value + " "

        out += compileExpr(exprTok)

        out += ")" if nested

    // Ternary conditional operator

    // Null coalescing
    elif (f = findToken(tok, "??")) != -1
        // name ?? '' => ((name) != null) ? (name) : ("")
        string lhs = compileExpr(Util.select(tok, 0, f))
        string rhs = compileExpr(Util.select(tok, f + 1))
        // System.out.println("LHS: " + lhs + ", RHS: " + rhs)
        out += "((" + lhs + ") != null) ? (" + lhs + ") : (" + rhs + ")"

    // Logical or
    elif (f = findAnyToken(tok, List.of("||", "or"))) != -1
        string lhs = compileExpr(Util.select(tok, 0, f))
        string rhs = compileExpr(Util.select(tok, f + 1))
        out += "(LangUtil.isTruthy(" + lhs + ")) ? (" + lhs + ") : (" + rhs + ")"

    // Logical and
    elif (f = findAnyToken(tok, List.of("&&", "and"))) != -1
        string lhs = compileExpr(Util.select(tok, 0, f))
        string rhs = compileExpr(Util.select(tok, f + 1))
        out += "(LangUtil.isTruthy(" + lhs + ")) ? (" + rhs + ") : (" + lhs + ")"

    // Bitwise or
    elif (f = findToken(tok, "|")) != -1
        string lhs = compileExpr(Util.select(tok, 0, f))
        string rhs = compileExpr(Util.select(tok, f + 1))
        out += lhs + " | " + rhs

    // Bitwise xor
    elif (f = findToken(tok, "^")) != -1
        string lhs = compileExpr(Util.select(tok, 0, f))
        string rhs = compileExpr(Util.select(tok, f + 1))
        out += lhs + " ^ " + rhs

    // Bitwise and
    elif (f = findToken(tok, "&")) != -1
        string lhs = compileExpr(Util.select(tok, 0, f))
        string rhs = compileExpr(Util.select(tok, f + 1))
        out += lhs + " & " + rhs

    // Equality operators
    elif (f = findAnyToken(tok, List.of("==", "!=", "===", "!=="))) != -1
        string oper = tok.get(f).value

        if oper.equals("===")
            oper = "=="
        elif oper.equals("!==")
            oper = "!="
        elif oper.equals("==")
            ...
        elif oper.equals("!=")
            ...

        string lhs = compileExpr(Util.select(tok, 0, f))
        string rhs = compileExpr(Util.select(tok, f + 1))
        out += lhs + " " + oper + " " + rhs

    // Relational and type testing operators
    elif (f = findAnyToken(tok, List.of("<", ">", "<=", ">=", "is"))) != -1
        string oper = tok.get(f).value

        if oper.equals("is")
            oper = "=="

        string lhs = compileExpr(Util.select(tok, 0, f))
        string rhs = compileExpr(Util.select(tok, f + 1))
        out += lhs + " " + oper + " " + rhs

    // Additive binary operators
    elif (f = findAnyToken(tok, List.of("+", "-"))) != -1
        string lhs = compileExpr(Util.select(tok, 0, f))
        string rhs = compileExpr(Util.select(tok, f + 1))
        out += lhs + " " + tok.get(f).value + " " + rhs

    // Multiplicative binary operators
    elif (f = findAnyToken(tok, List.of("*", "/", "%"))) != -1
        string lhs = compileExpr(Util.select(tok, 0, f))
        string rhs = compileExpr(Util.select(tok, f + 1))
        out += lhs + " " + tok.get(f).value + " " + rhs

    // Unary operators
    elif tok.size() > 1 && tok.get(0).type == Token.Type.UNARY_OPER
        string oper = tok.get(0).value
        string expr = compileExpr(Util.select(tok, 1))

        // not, !
        if oper.equals("not") || oper.equals("!")
            out += "!LangUtil.isTruthy(" + expr + ")"
        else
            out += tok.get(0).value + expr

    // Exponentiation
    elif (f = findToken(tok, "**")) != -1
        string lhs = compileExpr(Util.select(tok, 0, f))
        string rhs = compileExpr(Util.select(tok, f + 1))
        out += "Math.pow(" + lhs + ", " + rhs + ")"

    // Postfix increment
    elif tok.size() > 1 && tok.get(tok.size() - 1).type == Token.Type.INCREMENT
        string name = compileExpr(Util.select(tok, 0, tok.size() - 1))
        out += name + "++"

    // Postfix decrement
    elif tok.size() > 1 && tok.get(tok.size() - 1).type == Token.Type.DECREMENT
        string name = compileExpr(Util.select(tok, 0, tok.size() - 1))
        out += name + "--"

    // // Dotted function calls
    // elif (f = findTokenTypeRev(tok, Token.Type.EXPR)) > 0 && (f2 = findTokenRev(tok, ".")) != -1
    //     string lhs = compileExpr(Util.select(tok, 0, f2))
    //     string rhs = compileExpr(Util.select(tok, f2 + 1, f))
    //     Token t = tok.get(f)
    //     string args = t.value.substring(1, t.value.length() - 1)
    //     out += "LangUtil.dot(" + lhs + ", \"" + rhs + "\").invoke(" + compileExpr(Tokeniser.tokLine(args)) + ")"
    // }

    // Function calls
    elif tok.get(tok.size() - 1).type == Token.Type.EXPR
        string name = compileExpr(Util.select(tok, 0, tok.size() - 1))
        Token t = tok.get(tok.size() - 1)
        string args = t.value.substring(1, t.value.length() - 1)
        out += name + "(" + compileExpr(Tokeniser.tokLine(args)) + ")"

    // Dot operator
    elif (f = findTokenRev(tok, ".")) > 0
        string lhs = compileExpr(Util.select(tok, 0, f))
        string rhs = compileExpr(Util.select(tok, f + 1))
        out += lhs + "." + rhs
        // out += "LangUtil.dot(" + lhs + ", \"" + rhs + "\")"

    // Expressions (parentheses)
    elif tok.get(0).type == Token.Type.EXPR
        string expr = tok.get(0).value
        expr = expr.substring(1, expr.length() - 1)
        out += "(" + compileExpr(Tokeniser.tokLine(expr)) + ")"

    // Fallback - add tokens as they are
    else
        for j in tok.size()
            let t = tok.get(j)
            // Perform conversions for some tokens

            // Compile expressions
            if t.type == Token.Type.EXPR
                string raw = t.value.substring(1, t.value.length() - 1)
                ArrayList<Token> tokens = Tokeniser.tokLine(raw)
                out += "(" + compileExpr(tokens) + ")"

            // // Convert identifiers to get method calls
            // elif t.type == Token.Type.ID
            //     out += "LangUtil.get(" + currentClass + ".class, \"" + t.value + "\")"
            // }

            else
                out += tok.get(j).value + " "

    // if findTokenType(tok, Token.Type.STRING) != -1
    //     System.out.println("String: " + Util.d(tok))

    // System.out.println("Just did expr: " + Util.d(tok))

    return out.trim()

static string compileExpr(ArrayList<Token> tok):
    return compileExpr(tok, true)

static string compileMethodArgs(string expr):
    if expr.startsWith("(") && expr.endsWith(")")
        expr .= substring(1, expr.length() - 1)

    string out = ""
    ArrayList<Token> tok = Tokeniser.tokLine(expr)
    out += t.value + " " for t in tok
    return "(" + out.trim() + ")"

static string getNextTemp():
    return "_temp" + nextTempVar++

static int findToken(ArrayList<Token> tok, string value):
    // return i if t.value.equals(value) for t in tok
    for i in tok.size()
        return i if tok.get(i).value.equals(value)
    return -1

static int findTokenRev(ArrayList<Token> tok, string value):
    inline(for (int i = tok.size() - 1; i >= 0; --i))
        return i if tok.get(i).value.equals(value)
    return -1

static int findAnyToken(ArrayList<Token> tok, List<string> values):
    for i in tok.size()
        return i if values.contains(tok.get(i).value)
    return -1

static int findAnyTokenRev(ArrayList<Token> tok, List<string> values):
    inline(for (int i = tok.size() - 1; i >= 0; --i))
        return i if values.contains(tok.get(i).value)
    return -1

static int findTokenType(ArrayList<Token> tok, Token.Type type):
    for i in tok.size()
        return i if tok.get(i).type == type
    return -1

static int findTokenTypeRev(ArrayList<Token> tok, Token.Type type):
    inline(for (int i = tok.size() - 1; i >= 0; --i))
        return i if tok.get(i).type == type
    return -1

static ArrayList<Token.Type> getTokenTypes(ArrayList<Token> tok):
    let types = new ArrayList<Token.Type>()
    types.add(t.type) for t in tok
    return types

static MethodAccess getMethodAccess(ArrayList<Token> tok, int end):
    AccessMod accessMod = AccessMod.NONE
    bool isStatic = false

    // Fetch access modifier and static from line
    for j in end
        Token.Type t = tok.get(j).type
        string v = tok.get(j).value
        // System.out.println(j + ": " + v)

        // Attempt to get access modifier from every token (if not found already)
        if accessMod == AccessMod.NONE
            accessMod = MethodAccess.accessModFromToken(tok.get(j))

        isStatic = true if v.equals("static") || v.equals("#")

        // inline(switch (v))
        //     case "+" -> accessMod = AccessMod.PUBLIC
        //     case "-" -> accessMod = AccessMod.PRIVATE
        //     case "*" -> accessMod = AccessMod.PROTECTED
        //     case "?" -> accessMod = AccessMod.DEFAULT
        //     case "static", "#" -> isStatic = true
        //     inline(default -> {})

    return new MethodAccess(accessMod, isStatic)

static MethodAccess getMethodAccess(ArrayList<Token> tok):
    return getMethodAccess(tok, tok.size())

static ArrayList<Token> stripMethodAccess(ArrayList<Token> tok, int end):
    for i in end
        let t = tok.get(i)

        // Start list from first non-access token
        if MethodAccess.accessModFromToken(t) == AccessMod.NONE && !t.value.equals("static") && !t.value.equals("#")
            return new ArrayList<Token>(tok.subList(i, tok.size()))

    return tok

static ArrayList<Token> stripMethodAccess(ArrayList<Token> tok):
    return stripMethodAccess(tok, tok.size())
