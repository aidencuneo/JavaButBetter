static main:
    // Get input and output directories
    let compDir = "src"
    compDir = args[0] if args

    let outDir = compDir + "_out"
    outDir = args[1] if args.length > 1

    // Create directory if it doesn't exist
    if !new File(outDir).exists()
        new File(outDir).mkdir()

    // Compile files one by one
    let files = new File(compDir).list((File dir, string name) -> name.endsWith(".jbb"))

    // string[] files = new File(compDir).list()

    for i in files.length
        let fileContent = ""
        let fromPath = compDir + "/" + files[i]
        let toPath = outDir + "/" + files[i].split("\\.")[0] + ".java"
        let className = files[i].split("\\.")[0]

        // Read input file
        try let scanner = new Scanner(new File(fromPath))
            fileContent = scanner.useDelimiter("\\Z").next()
        catch (FileNotFoundException e)
            ...

        // Compile this file
        let res = Compiler.compileFile(className, fileContent)
        let compiled = res.getCompiledCode(className)

        // Write to output file
        try let writer = new PrintWriter(toPath)
            new File(toPath).createNewFile()
            writer.println(compiled)
        catch (IOException e)
            ...

    // System.exit(0)
    println "\n\nCompiling LangUtil..."

    // Compile LangUtil
    let res = Compiler.compileFile("LangUtil", """
// import java.lang.reflect.*

# print(object ... args):
    System.out.print('' + x) for x in args

# println(object ... args):
    System.out.print('' + x) for x in args
    System.out.println('')

# bool isTruthy(bool v):
    ret v

# bool isTruthy(object v):
    ret v != null

# bool isTruthy(int v):
    ret v != 0

# bool isTruthy(double v):
    ret v != 0

# bool isTruthy(string v):
    ret false if v is null
    ret !v.isEmpty()

# bool (T) isTruthy(T[] v):
    ret v.length > 0

# bool isTruthy(List v):
    ret false if v is null
    ret !v.isEmpty()

# T[] (T) asIterable(T[] v):
    ret v

# List<Int> asIterable(int n):
    let lst = new ArrayList<Int>()
    inline `for (int i = 0; i < n; ++i)`
        lst.add(i)
    ret lst

# Iterable<T> (T) asIterable(Iterable<T> v):
    ret v

# char[] asIterable(string s):
    ret s.toCharArray()

// # Object get(Object obj, string varname):
//     let method_name = '_get_' + varname
//     let inst = obj

//     try
//         return inst.getClass().getDeclaredMethod(method_name).invoke(inst)
//     catch (IllegalAccessException | NoSuchMethodException | InvocationTargetException e)
//         ...

//     try
//         return inst.getClass().getDeclaredField(varname).get(inst)
//     catch (IllegalAccessException | IllegalArgumentException | NoSuchFieldException e)
//         return null

// # Object dot(Object obj, string method):
//     try
//         return obj.getClass().getMethod(method)
//     catch (NoSuchMethodException e)
//         return null

// Operators
    """.trim())
    let langUtilCode = res.getCompiledCode("LangUtil")

    try let writer = new PrintWriter(outDir + "/LangUtil.java")
        new File(outDir + "/LangUtil.java").createNewFile()
        writer.println(langUtilCode)
    catch (IOException e)
        ...

    println "\nDone."
    // dot(dot(System, "out"), "println").invoke(dot(System, "out"), "Done.")
    // var f = a.b.c.d.e("hello")
    // var f = dot(dot(dot(dot(a, "b"), "c"), "d"), "e").invoke("hello")
