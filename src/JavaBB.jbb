static main:
    // Get input and output directories
    let compDir = "src"
    compDir = args[0] if args

    let outDir = compDir + "_out"
    outDir = args[1] if args.length > 1

    // Create directory if it doesn't exist
    if !new File(outDir).exists()
        new File(outDir).mkdir()

    // Compile files one by one
    let files = new File(compDir).list((File dir, string name) -> name.endsWith(".jbb"))

    // Extensions code
    let extensionsClassRes = Compiler.compileFile("Extensions", """
public static class Extensions

// len
int len(string s):
    ret s.length()

(T) int len(Iterable<T> v):
    let c = 0
    ++c for _ in v
    ret c

(T) int len(T[] v):
    ret v.length

// getIndex
char operGetIndex(string s, int i):
    i = LangUtil.indexConvert(i, s.length())
    ret s.charAt(i)

(T) T operGetIndex(T[] v, int i):
    i = LangUtil.indexConvert(i, v.length)
    inline(return v[i];)

(T) T operGetIndex(List<T> v, int i):
    i = LangUtil.indexConvert(i, v.size())
    ret v.get(i)

// +
int operAdd(int a, int b):
    inline(return a + b;)

long operAdd(long a, long b):
    inline(return a + b;)

double operAdd(double a, double b):
    inline(return a + b;)

int operAdd(bool a, bool b):
    inline(return (a ? 1 : 0) + (b ? 1 : 0);)

// ==
bool operEq(int a, int b):
    inline(return a == b;)

bool operEq(long a, long b):
    inline(return a == b;)

bool operEq(double a, double b):
    inline(return a == b;)

bool operEq(bool a, bool b):
    inline(return a == b;)

bool operEq(string a, string b):
    return a.equals(b)

bool operEq(object a, object b):
    return a.equals(b)
    """.trim())

    for i in files.length
        let fileContent = ""
        let fromPath = compDir + "/" + files[i]
        let toPath = outDir + "/" + files[i].split("\\.")[0] + ".java"
        let className = files[i].split("\\.")[0]

        // Read input file
        try let scanner = new Scanner(new File(fromPath))
            fileContent = scanner.useDelimiter("\\Z").next()
        catch FileNotFoundException e
            ...

        // Compile this file
        let res = Compiler.compileFile(className, fileContent)

        // Extract Extensions class if it exists
        if res.classes.containsKey("Extensions")
            // Add code to current Extensions class
            let newCode = res.classes.get("Extensions").code
            let extensionsClass = extensionsClassRes.classes.get("Extensions")
            extensionsClass.code = extensionsClass.code + newCode

            // Remove Extensions class from this file's output
            res.classes.remove("Extensions")

        // Get final compiled code
        let compiled = res.getCompiledCode(className)

        // Write to output file
        try let writer = new PrintWriter(toPath)
            new File(toPath).createNewFile()
            writer.println(compiled)
        catch IOException e
            ...

    // System.exit(0)
    println "\n\nCompiling Extensions..."

    // Write Extensions.java
    try let writer = new PrintWriter(outDir + "/Extensions.java")
        new File(outDir + "/Extensions.java").createNewFile()
        writer.println(extensionsClassRes.getCompiledCode("Extensions"))
    catch IOException e
        ...

    println "\n\nCompiling LangUtil..."

    // Compile LangUtil
    let res = Compiler.compileFile("LangUtil", """
// import java.lang.reflect.*

class Null

public static class LangUtil

print(object ... args):
    System.out.print('' + x) for x in args

println(object ... args):
    System.out.print('' + x) for x in args
    System.out.println('')

// isTruthy
bool isTruthy(bool v):
    ret v

bool isTruthy(int v):
    ret v != 0

bool isTruthy(double v):
    ret v != 0

bool isTruthy(string v):
    ret false if v is null
    inline(return !v.isEmpty();)

(T) bool isTruthy(T[] v):
    ret v.length > 0

bool isTruthy(List v):
    ret false if v is null
    inline(return !v.isEmpty();)

bool isTruthy(object v):
    inline(if (v instanceof Boolean x) return x;)
    inline(if (v instanceof Integer x) return x != 0;)
    inline(if (v instanceof Double x) return x != 0;)
    inline(if (v instanceof String x) return x == null ? false : !x.isEmpty();)
    inline(if (v instanceof List x) return x == null ? false : !x.isEmpty();)
    ret v != null

// asIterable
(T) T[] asIterable(T[] v):
    ret v

List<Int> asIterable(int n):
    let lst = new ArrayList<Int>()
    inline(for (int i = 0; i < n; ++i))
        lst.add(i)
    ret lst

(T) Iterable<T> asIterable(Iterable<T> v):
    ret v

(T) Iterable<T> asIterable(Iterator<T> v):
    ret new IteratorToIterable<T>(v)

char[] asIterable(string s):
    ret s.toCharArray()

// slice (string)
string slice(string s, int start, int end, int step):
    start = indexConvert(start, s.length())
    end = indexConvert(end, s.length())

    if step == 1
        return s.substring(start, end)

    let newStr = ""
    inline(for (int i = start; step > 0 ? (i < end) : (i > end); i += step))
        newStr += s.charAt(i)
    ret newStr

string slice(string s, Null start, Null end, int step):
    return slice(s, step > 0 ? 0 : s.length() - 1, step > 0 ? s.length() : -s.length() - 1, step)

string slice(string s, Null start, int end, int step):
    return slice(s, step > 0 ? 0 : s.length() - 1, end, step)

string slice(string s, int start, Null end, int step):
    return slice(s, start, step > 0 ? s.length() : -1, step)

// slice (ArrayList)
(T) ArrayList<T> slice(ArrayList<T> v, int start, int end, int step):
    start = indexConvert(start, v.size())
    end = indexConvert(end, v.size())
    return new ArrayList<>(v.subList(start, end))

(T) ArrayList<T> slice(ArrayList<T> v, Null start, Null end, int step):
    return slice(v, step > 0 ? 0 : v.size() - 1, step > 0 ? v.size() : -v.size() - 1, step)

(T) ArrayList<T> slice(ArrayList<T> v, Null start, int end, int step):
    return slice(v, step > 0 ? 0 : v.size() - 1, end, step)

(T) ArrayList<T> slice(ArrayList<T> v, int start, Null end, int step):
    return slice(v, start, step > 0 ? v.size() : -1, step)

// slice (List)
(T) List<T> slice(List<T> v, int start, int end, int step):
    start = indexConvert(start, v.size())
    end = indexConvert(end, v.size())

    let lst = new ArrayList<T>()
    inline(for (int i = start; step > 0 ? (i < end) : (i > end); i += step))
        println i + ", " + start + ", " + end + ", " + step
        lst.add(v.get(i))
    ret lst

(T) List<T> slice(List<T> v, Null start, Null end, int step):
    return slice(v, step > 0 ? 0 : v.size() - 1, step > 0 ? v.size() : -v.size() - 1, step)

(T) List<T> slice(List<T> v, Null start, int end, int step):
    return slice(v, step > 0 ? 0 : v.size() - 1, end, step)

(T) List<T> slice(List<T> v, int start, Null end, int step):
    return slice(v, start, step > 0 ? v.size() : -1, step)

// slice (array)
(T) List<T> slice(T[] v, int start, int end, int step):
    start = indexConvert(start, v.length)
    end = indexConvert(end, v.length)

    let lst = new ArrayList<T>()
    inline(for (int i = start; step > 0 ? (i < end) : (i > end); i += step))
        lst.add(v[i])
    ret lst

(T) List<T> slice(T[] v, Null start, Null end, int step):
    return slice(v, step > 0 ? 0 : v.length - 1, step > 0 ? v.length : -v.length - 1, step)

(T) List<T> slice(T[] v, Null start, int end, int step):
    return slice(v, step > 0 ? 0 : v.length - 1, end, step)

(T) List<T> slice(T[] v, int start, Null end, int step):
    return slice(v, start, step > 0 ? v.length : -1, step)

// indexConvert (helper function)
int indexConvert(int index, int size):
    index += size if index < 0
    return index

// range (int)
IntRange range(int start, int stop, int step):
    return new IntRange(start, stop, step)

IntRange range(int start, Null stop, Null step):
    return range(start, Int.MAX_VALUE, 1)

IntRange range(int start, Null stop, int step):
    return range(start, step > 0 ? Int.MAX_VALUE : Int.MIN_VALUE, step)

IntRange range(int start, int stop, Null step):
    return range(start, stop, start < stop ? 1 : -1)

// range (long)
LongRange range(long start, long stop, long step):
    return new LongRange(start, stop, step)

LongRange range(long start, Null stop, Null step):
    return range(start, Long.MAX_VALUE, 1)

LongRange range(long start, Null stop, long step):
    return range(start, step > 0 ? Long.MAX_VALUE : Long.MIN_VALUE, step)

LongRange range(long start, long stop, Null step):
    return range(start, stop, start < stop ? 1 : -1)

// range (double)
DoubleRange range(double start, double stop, double step):
    return new DoubleRange(start, stop, step)

DoubleRange range(double start, Null stop, Null step):
    return range(start, Double.MAX_VALUE, 1)

DoubleRange range(double start, Null stop, double step):
    return range(start, step > 0 ? Double.MAX_VALUE : Double.MIN_VALUE, step)

DoubleRange range(double start, double stop, Null step):
    return range(start, stop, start < stop ? 1 : -1)

// // range (char)
// CharRange range(char start, char stop, char step):
//     return new CharRange(start, stop, step)

// CharRange range(char start, Null stop, Null step):
//     return range(start, Char.MAX_VALUE, 1)

// CharRange range(char start, Null stop, char step):
//     return range(start, step > 0 ? Char.MAX_VALUE : Char.MIN_VALUE, step)

// CharRange range(char start, char stop, Null step):
//     return range(start, stop, start < stop ? 1 : -1)

// IntRange class
inline(
static class IntRange implements Iterator<Integer> {
    public int start;
    public int stop;
    public int step;
    public int current;

    public IntRange(Integer start, Integer stop, Integer step) {
        this.start = start;
        this.stop = stop;
        this.step = step;
        this.current = start;
    }

    @Override
    public boolean hasNext() {
        if (step > 0 && stop > start)
            return current < stop;
        if (step < 0 && stop < start)
            return current > stop;
        return step == 0;
    }

    @Override
    public Integer next() {
        if (!hasNext())
            throw new NoSuchElementException();

        int value = current;
        current += step;

        return value;
    }
})

// LongRange class
inline(
static class LongRange implements Iterator<Long> {
    public long start;
    public long stop;
    public long step;
    public long current;

    public LongRange(Long start, Long stop, Long step) {
        this.start = start;
        this.stop = stop;
        this.step = step;
        this.current = start;
    }

    @Override
    public boolean hasNext() {
        if (step > 0 && stop > start)
            return current < stop;
        if (step < 0 && stop < start)
            return current > stop;
        return step == 0;
    }

    @Override
    public Long next() {
        if (!hasNext())
            throw new NoSuchElementException();

        long value = current;
        current += step;

        return value;
    }
})

// DoubleRange class
inline(
static class DoubleRange implements Iterator<Double> {
    public double start;
    public double stop;
    public double step;
    public double current;

    public DoubleRange(Double start, Double stop, Double step) {
        this.start = start;
        this.stop = stop;
        this.step = step;
        this.current = start;
    }

    @Override
    public boolean hasNext() {
        if (step > 0 && stop > start)
            return current < stop;
        if (step < 0 && stop < start)
            return current > stop;
        return step == 0;
    }

    @Override
    public Double next() {
        if (!hasNext())
            throw new NoSuchElementException();

        double value = current;
        current += step;

        return value;
    }
})

// Iterator to iterable class
inline(
static class IteratorToIterable<T> implements Iterable<T> {
    private final Iterator<T> iterator;

    public IteratorToIterable(Iterator<T> iterator) {
        if (iterator == null)
            throw new IllegalArgumentException();
        this.iterator = iterator;
    }

    @Override
    public Iterator<T> iterator() {
        return iterator;
    }
})
    """.trim())
    let langUtilCode = res.getCompiledCode("LangUtil")

    try let writer = new PrintWriter(outDir + "/LangUtil.java")
        new File(outDir + "/LangUtil.java").createNewFile()
        writer.println(langUtilCode)
    catch IOException e
        ...

    println "\n\nDone."
    // dot(dot(System, "out"), "println").invoke(dot(System, "out"), "Done.")
    // var f = a.b.c.d.e("hello")
    // var f = dot(dot(dot(dot(a, "b"), "c"), "d"), "e").invoke("hello")
