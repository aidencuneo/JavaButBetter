alias StrIntMap = HashMap<string, Int>
alias max(a, b) = a > b ? a : b
alias min(a, b, c) = a < b ? a : b < c ? b : c
alias bigtype(a, b) = HashMap<a, b>
alias balls = max(1, 2)

+ static StrIntMap name1
+ static StrIntMap name2 = new StrIntMap()
+ static (T) StrIntMap name3:
    return null

?#main:
    println balls + 10
    min(5, 6.9, 2) if "something" && max("h", "w")
    let ages = new StrIntMap()
    StrIntMap ages2 = new StrIntMap()

+# (T) HashMap<string, string> method(string[] args):
    return null

// int field = 10
// int age = 21
// string name = 'aiden'
// string name2 = 'value'

// static main:
//     let some1000_a = (1.0**1.0 * 2 + 5 - 1)
//     println "hello" + ", " + 10
//     println 'nice' if List.of(1, 2, 'hi')
//     println 'yeah' if List.of(1)

//     println i for i in 10
//     print 0 + c + ' ' for c in "hello\n"

//     let num = 17
//     println num ^ 3
//     println num ^ 3 ^ 3
//     println num ^ 3 ^ 3 ^ 3
//     println 13 ^ 3 ^ 5 ^ 6

//     // 5 and go()
//     // println "YEAH!" if not a or b

// public string _get_name:
//     return name.toUpperCase()

// # string go:
//     println "WHAT!!!!!!!!"
//     return "value"

// class Operators

// T[] (T) + (T[] a, T b):
//     ArrayList<T> res = new ArrayList<>(a)
//     res.add(b)
//     ret res

// List<T> + (List<T> a, T b):
//     res.add(b)
//     ret res

// class Extensions

// int (T) length(T[] arr):
//     ret arr.length

// int (T) length(List<T> arr):
//     ret arr.size()

// int length(string s):
//     ret s.length()
